<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[bitmap帮助手册]]></title>
    <url>%2FMyBlog%2F2018%2F03%2F24%2Fbitmap%E5%B8%AE%E5%8A%A9%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[bitmap帮助手册 收集整理了经常使用的关于bitmap的方法,包含按照图片的比例大小压缩、指定尺寸缩放和质量压缩。 压缩压缩可以有三种方式：1、比例压缩2、质量压缩3、比例压缩然后质量压缩 图片按比例大小压缩方法分成三种来源：1、来源为bitmap2、来源为Uri3、来源为图片地址（path） 直接压缩bitmap123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 图片按比例大小压缩方法 * * @param image （根据Bitmap图片压缩） * @return */ public static Bitmap compressScale(Bitmap image) &#123; ByteArrayOutputStream baos = new ByteArrayOutputStream(); image.compress(Bitmap.CompressFormat.JPEG, 100, baos); // 判断如果图片大于1M,进行压缩避免在生成图片（BitmapFactory.decodeStream）时溢出 if (baos.toByteArray().length / 1024 &gt; 1 * 1024) &#123; baos.reset();// 重置baos即清空baos image.compress(Bitmap.CompressFormat.JPEG, 80, baos);// 这里压缩50%，把压缩后的数据存放到baos中 &#125; ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray()); BitmapFactory.Options newOpts = new BitmapFactory.Options(); // 开始读入图片，此时把options.inJustDecodeBounds 设回true了 newOpts.inJustDecodeBounds = true; Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, newOpts); newOpts.inJustDecodeBounds = false; int w = newOpts.outWidth; int h = newOpts.outHeight; // 现在主流手机比较多是800*480分辨率，所以高和宽我们设置为 // float hh = 800f;// 这里设置高度为800f // float ww = 480f;// 这里设置宽度为480f float hh = 100f; float ww = 100f; // 缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可 int be = 1;// be=1表示不缩放 if (w &gt; h &amp;&amp; w &gt; ww) &#123;// 如果宽度大的话根据宽度固定大小缩放 be = (int) (newOpts.outWidth / ww); &#125; else if (w &lt; h &amp;&amp; h &gt; hh) &#123; // 如果高度高的话根据高度固定大小缩放 be = (int) (newOpts.outHeight / hh); &#125; if (be &lt;= 0) be = 1; newOpts.inSampleSize = be; // 设置缩放比例 // newOpts.inPreferredConfig = Config.RGB_565;//降低图片从ARGB888到RGB565 // 重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了 isBm = new ByteArrayInputStream(baos.toByteArray()); bitmap = BitmapFactory.decodeStream(isBm, null, newOpts); return compressImage(bitmap);// 压缩好比例大小后再进行质量压缩 //return bitmap; &#125; 通过uri获取图片并进行压缩12345678910111213141516171819202122232425262728293031323334353637383940/** * 通过uri获取图片并进行压缩 * * @param uri */ public static Bitmap getBitmapFormUri(Activity ac, Uri uri) throws FileNotFoundException, IOException &#123; InputStream input = ac.getContentResolver().openInputStream(uri); BitmapFactory.Options onlyBoundsOptions = new BitmapFactory.Options(); onlyBoundsOptions.inJustDecodeBounds = true; onlyBoundsOptions.inDither = true;//optional onlyBoundsOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional BitmapFactory.decodeStream(input, null, onlyBoundsOptions); input.close(); int originalWidth = onlyBoundsOptions.outWidth; int originalHeight = onlyBoundsOptions.outHeight; if ((originalWidth == -1) || (originalHeight == -1)) return null; //图片分辨率以480x800为标准 float hh = 100f; float ww = 100f; //缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可 int be = 1;//be=1表示不缩放 if (originalWidth &gt; originalHeight &amp;&amp; originalWidth &gt; ww) &#123;//如果宽度大的话根据宽度固定大小缩放 be = (int) (originalWidth / ww); &#125; else if (originalWidth &lt; originalHeight &amp;&amp; originalHeight &gt; hh) &#123;//如果高度高的话根据宽度固定大小缩放 be = (int) (originalHeight / hh); &#125; if (be &lt;= 0) be = 1; //比例压缩 BitmapFactory.Options bitmapOptions = new BitmapFactory.Options(); bitmapOptions.inSampleSize = be;//设置缩放比例 bitmapOptions.inDither = true;//optional bitmapOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional input = ac.getContentResolver().openInputStream(uri); Bitmap bitmap = BitmapFactory.decodeStream(input, null, bitmapOptions); input.close(); return compressImage(bitmap);//再进行质量压缩 &#125; 通过path获取图片并进行压缩12345678910111213141516171819202122232425262728293031323334353637383940414243 /** * 通过path获取图片并进行压缩 * * @param path */ public static Bitmap getBitmapFormPath( String path) throws IOException &#123;// InputStream input = ac.getContentResolver().openInputStream(uri); File imgFile = new File(path); InputStream input = new FileInputStream(imgFile); BitmapFactory.Options onlyBoundsOptions = new BitmapFactory.Options(); onlyBoundsOptions.inJustDecodeBounds = true; onlyBoundsOptions.inDither = true;//optional onlyBoundsOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional BitmapFactory.decodeStream(input, null, onlyBoundsOptions); input.close(); int originalWidth = onlyBoundsOptions.outWidth; int originalHeight = onlyBoundsOptions.outHeight; if ((originalWidth == -1) || (originalHeight == -1)) return null; //图片分辨率以480x800为标准 float hh = 100f; float ww = 100f; //缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可 int be = 1;//be=1表示不缩放 if (originalWidth &gt; originalHeight &amp;&amp; originalWidth &gt; ww) &#123;//如果宽度大的话根据宽度固定大小缩放 be = (int) (originalWidth / ww); &#125; else if (originalWidth &lt; originalHeight &amp;&amp; originalHeight &gt; hh) &#123;//如果高度高的话根据宽度固定大小缩放 be = (int) (originalHeight / hh); &#125; if (be &lt;= 0) be = 1; //比例压缩 BitmapFactory.Options bitmapOptions = new BitmapFactory.Options(); bitmapOptions.inSampleSize = be;//设置缩放比例 bitmapOptions.inDither = true;//optional bitmapOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional input = new FileInputStream(imgFile); Bitmap bitmap = BitmapFactory.decodeStream(input, null, bitmapOptions); input.close(); return compressImage(bitmap);//再进行质量压缩 &#125; 图片的缩放123456789101112131415161718192021222324252627/*** * 图片的缩放方法 * * @param bgimage * ：源图片资源 * @param newWidth * ：缩放后宽度 * @param newHeight * ：缩放后高度 * @return */ public static Bitmap zoomImage(Bitmap bgimage, double newWidth, double newHeight) &#123; // 获取这个图片的宽和高 float width = bgimage.getWidth(); float height = bgimage.getHeight(); // 创建操作图片用的matrix对象 Matrix matrix = new Matrix(); // 计算宽高缩放率 float scaleWidth = ((float) newWidth) / width; float scaleHeight = ((float) newHeight) / height; // 缩放图片动作 matrix.postScale(scaleWidth, scaleHeight); Bitmap bitmap = Bitmap.createBitmap(bgimage, 0, 0, (int) width, (int) height, matrix, true); return bitmap; &#125; 质量压缩方法1234567891011121314151617181920/** * 质量压缩方法 * * @param image * @return */ public static Bitmap compressImage(Bitmap image) &#123; ByteArrayOutputStream baos = new ByteArrayOutputStream(); image.compress(Bitmap.CompressFormat.JPEG, 100, baos);// 质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中 int options = 90; while (baos.toByteArray().length / 1024 &gt; 1*3) &#123; // 循环判断如果压缩后图片是否大于100Kb,大于继续压缩 baos.reset(); // 重置baos即清空baos image.compress(Bitmap.CompressFormat.JPEG, options, baos);// 这里压缩options%，把压缩后的数据存放到baos中 options -= 10;// 每次都减少10 &#125; ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());// 把压缩后的数据baos存放到ByteArrayInputStream中 Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, null);// 把ByteArrayInputStream数据生成图片 return zoomImage(bitmap,100,100); &#125;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>android</tag>
        <tag>bitmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb idea的妙用]]></title>
    <url>%2FMyBlog%2F2018%2F03%2F24%2Fadb_idea%E7%9A%84%E5%A6%99%E7%94%A8%2F</url>
    <content type="text"><![CDATA[adb idea的妙用 在开发调试的时候，我们经常需要把当前项目app的数据清空，以测试用户第一次打开app时的情况。通常我们需要在设置里面通过好几步繁琐的操作才能完成。特别是在测试机器里面，因为demo太多，要找到自己的app很难。今天就来介绍一个能很快解决该问题的Android Studio插件：ADB IDEA。 ADB IDEA是一个开源项目，地址：https://github.com/pbreault/adb-idea 。里面有项目介绍以及安装方法。 安装依次打开references/Settings-&gt;Plugins-&gt;Browse Repositories，在输入框中输入adb，选择列表中的ADB Idea。点击安装。 使用可以使用Ctrl-Shift-A (or Ctrl-Alt-Shift-A on Linux and Windows),在弹出的对话框中直接输入adb找到相关的操作。 so easy~]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>插件</tag>
        <tag>android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android中tools的含义及用法]]></title>
    <url>%2FMyBlog%2F2018%2F03%2F24%2Ftools%E7%9A%84%E5%A6%99%E7%94%A8%2F</url>
    <content type="text"><![CDATA[android中tools的含义及用法安卓开发中，在写布局代码的时候，ide可以看到布局的预览效果。但是有些效果则必须在运行之后才能看见。一般我们在xml中写死，等写完代码我就把这些东西一并删了。但是你可能会忘，以至于在你的最终产品中也会有这样的代码。 开始使用tools以上的情况是可以避免的，我们使用tools命名空间以及其属性来解决这个问题。 1xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools可以告诉Android Studio，哪些属性在运行的时候是被忽略的，只在设计布局的时候有效。比如我们要让android:text属性只在布局预览中有效可以这样 123456&lt;TextView android:id=&quot;@+id/text_main&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_margin=&quot;@dimen/main_margin&quot; tools:text=&quot;I am a title&quot; /&gt; tools可以覆盖android的所有标准属性，将android:换成tools:即可。同时在运行的时候就连tools:本身都是被忽略的，不会被带进apk中。 tools属性的种类tools属性可以分为两种：一种是影响Lint提示的，一种是关于xml布局设计的。以上介绍的是tools的最基本用法：在UI设计的时候覆盖标准的android属性，属于第二种。下面介绍Lint相关的属性。 Lint相关的属性123tools:ignore tools:targetApi tools:locale tools:ignoreignore属性是告诉Lint忽略xml中的某些警告。 假设我们有这样的一个ImageView 1234567&lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginStart=&quot;@dimen/margin_main&quot; android:layout_marginTop=&quot;@dimen/margin_main&quot; android:scaleType=&quot;center&quot; android:src=&quot;@drawable/divider&quot; /&gt; Lint会提示该ImageView缺少android:contentDescription属性。我们可以使用tools:ignore来忽略这个警告：12345678&lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginStart=&quot;@dimen/margin_main&quot; android:layout_marginTop=&quot;@dimen/margin_main&quot; android:scaleType=&quot;center&quot; android:src=&quot;@drawable/divider&quot; tools:ignore=&quot;contentDescription&quot; /&gt; tools:targetApi假设minSdkLevel 15，而你使用了api21中的控件比如RippleDrawable 12&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:color=&quot;@color/accent_color&quot; /&gt; 则Lint会提示警告。 为了不显示这个警告，可以：1234&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:color=&quot;@color/accent_color&quot; tools:targetApi=&quot;LOLLIPOP&quot; /&gt; tools:locale（本地语言）属性默认情况下res/values/strings.xml中的字符串会执行拼写检查，如果不是英语，会提示拼写错误，通过以下代码来告诉studio本地语言不是英语，就不会有提示了。1234567&lt;resources xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools:locale=&quot;it&quot;&gt; &lt;!-- Your strings go here --&gt; &lt;/resources&gt; UI预览的其他属性（非android标准属性） tools:context tools:menu tools:actionBarNavMode tools:listitem/listheader/listfooter tools:showIn tools:layout tools:contextcontext属性其实正是的称呼是activity属性，有了这个属性，ide就知道在预览布局的时候该采用什么样的主题。同时他还可以在android studio的java代码中帮助找到相关的文件（Go to Related files）该属性的值是activity的完整包名123456789&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/container&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.android.example.MainActivity&quot;&gt; &lt;!-- ... --&gt; &lt;/LinearLayout&gt; tools:menu1、告诉IDE 在预览窗口中使用哪个菜单，这个菜单将显示在layout的根节点上（actionbar的位置）。 2、其实预览窗口非常智能，如果布局和一个activity关联（指上面所讲的用tools:context关联）它将会自动查询相关activity的onCreateOptionsMenu方法中的代码，以显示菜单。而menu属性则可以覆盖这种默认的行为。 3、你还可以为menu属性定义多个菜单资源，不同的菜单资源之间用逗号隔开。tools:menu=”menu_main,menu_edit”如果你不希望在预览图中显示菜单则：tools:menu=”” 4、最后需要注意，当主题为Theme.AppCompat时，这个属性不起作用。 tools:actionBarNavMode这个属性告诉ide app bar（Material中对actionbar的称呼）的显示模式，其值可以是 standard tabs list 123456&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:actionBarNavMode=&quot;tabs&quot; /&gt; 同样的，当主题是Theme.AppCompat (r21+, at least) 或者Theme.Material,或者使用了布局包含Toolbar的方式。 该属性也不起作用，只有holo主题才有效。 listitem, listheader 和listfooter 属性 顾名思义就是在ListView ExpandableListView等的预览效果中添加头部 尾部 以及子item的预览布局。 1234567&lt;GridView android:id=&quot;@+id/list&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; tools:listheader=&quot;@layout/list_header&quot; tools:listitem=&quot;@layout/list_item&quot; tools:listfooter=&quot;@layout/list_footer&quot; /&gt; tools:layouttools:layout告诉ide，Fragment在程序预览的时候该显示成什么样 123456789&lt;fragment xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/item_list&quot; android:name=&quot;com.example.fragmenttwopanel.ItemListFragment&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_marginLeft=&quot;16dp&quot; android:layout_marginRight=&quot;16dp&quot; tools:layout=&quot;@android:layout/list_content&quot; /&gt; tools:showIn该属性设置于一个被其他布局的布局的根元素上。这让您可以指向包含此布局的其中一个布局，在设计时这个被包含的布局会带着周围的外部布局被渲染。这将允许您“在上下文中”查看和编辑这个布局。需要 Studio 0.5.8 或更高版本。 关于tools 就介绍完了。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>android</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TextView 默认字体大小]]></title>
    <url>%2FMyBlog%2F2018%2F03%2F24%2FAndroid-TextView%20%E9%BB%98%E8%AE%A4%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%2F</url>
    <content type="text"><![CDATA[Android-TextView 默认字体大小今天写代码的时候，突然来了兴致，TextView如果不指定textSize，那它的默认字体大小会是多少。 查看TextView源码：123456789101112 int textColorHighlight = 0; ColorStateList textColor = null; ColorStateList textColorHint = null; ColorStateList textColorLink = null; int textSize = 15;//默认字体 String fontFamily = null; boolean fontFamilyExplicit = false; int typefaceIndex = -1; int styleIndex = -1; boolean allCaps = false; int shadowcolor = 0; 答案是15，我们可以清晰的看到源码中的textSize为15，单位是sp。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>android</tag>
        <tag>TextView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[适配Android不同机型，不同屏幕]]></title>
    <url>%2FMyBlog%2F2018%2F03%2F24%2F%E9%80%82%E9%85%8DAndroid%E4%B8%8D%E5%90%8C%E6%9C%BA%E5%9E%8B%EF%BC%8C%E4%B8%8D%E5%90%8C%E5%B1%8F%E5%B9%95%2F</url>
    <content type="text"><![CDATA[适配Android不同机型，不同屏幕借鉴drawable文件夹，values使用dimens控制字体大小、边距大小，达到适配的效果。 分辨率说明首先查看密度 与分辨率的关系图 密度 ldpi mdpi hdpi xhdpi xxhdpi 密度值 120 160 240 320 480 代表分辨率 240*320 320*480 480*800 720*1280 1080*1920 创建不同的位图（Android官方介绍） xxxhdpi: 5.0 500*500 xxhdpi: 3.0 300*300 xhdpi：2.0 200*200 hdpi：1.5 150*150 mdpi：1.0（baseline） 100*100 ldpi：0.75 75*75 查看不同分辨率下图片的数值 文件夹名称 比例 图片大小 屏幕宽度 DPI值 分辨率举例 drawable-xxxhdpi 5.0 500*500 1440左右 640dpi 2560*1440（Nexus6） drawable-xxxhdpi 5.0 500*500 1440左右 640dpi 2560*1440（Nexus6） drawable-xxhdpi 3.0 300*300 1080左右 480dpi 1080*1920 drawable-xhdpi 2.0 200*200 720左右 320dpi 720*1280 drawable-hdpi 1.5 150*150 480左右 240dpi 480800,480854,540*960 drawable-mdpi 1.0（BaseLine） 100*100 360左右 160dpi 320*480 drawable-ldpi 0.75 75*75 240左右 - - values适配借鉴drawable文件夹，依次创建values，values-mdpi, values-hdpi，values-xhdpi, values-xxhdpi, values-xxxhdpi。 (鉴于现在ldpi的机型很少，就直接使用默认的values来做适配)。 文件夹名称 字体大小sp 距离大小dp 手机输出值（字体大小） 手机显示值（距离大小） values-xxxhdpi 50 50 175.0 175.0 values-xxhdpi 30 30 90.0 90.0 values-xhdpi 20 20 40.0 40.0 values-hdpi 15 15 22.5 22.5 values-hdpi(854*480) - - 25.87 22.5 values-mdpi 10 10 10.0 10.0 values-ldpi 7.5 7.5 5.625 5.625 至此结束啦~~]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>适配</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio解决Java程序输出中文乱码]]></title>
    <url>%2FMyBlog%2F2018%2F01%2F01%2FAndroid%20Studio%E8%A7%A3%E5%86%B3Java%E7%A8%8B%E5%BA%8F%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[在使用android studio开发中会遇到乱码的问题 经查阅资料，发现需要手动在build.gradle中添加代码 新版 1tasks.withType(JavaCompile) &#123; options.encoding = UTF-8 &#125; 旧版，以gradle-1.12为例 1tasks.withType(Compile) &#123; options.encoding = UTF-8 &#125;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单例toast]]></title>
    <url>%2FMyBlog%2F2018%2F01%2F01%2F%E5%8D%95%E4%BE%8Btoast%2F</url>
    <content type="text"><![CDATA[简介当我们处于某个场景，例如一个按钮可以触发toast的显示，当你在多次点击按钮时，会多次触发toast的显示。而调用android原生的toast的makeText的方式所生产的toast是被加到一个队列里面，然后依次执行。这样就会出现多次点击按钮触发的toast一直会按队列出现在界面上，而且即使退出了当前界面也会一直出现在手机上,而且无法手动取消，这时的用户体验变得非常的差。这时就可以使用自定义样式的toast。 12345678910111213141516171819202122public class ToastUtils &#123; private static Toast toast = null; //Application初始化，避免内存泄漏 public static void init(Application mContext) &#123; if (toast != null) &#123; return; &#125; //不使用new Toast(mContext)，会出异常 toast = Toast.makeText(mContext, &quot;&quot;, Toast.LENGTH_SHORT); &#125; public static void showToast(String msg) &#123; if (toast == null) &#123; return; &#125; else &#123; toast.setDuration(Toast.LENGTH_LONG); toast.setText(msg); toast.show(); &#125; &#125;&#125; 然后哪用就哪调用方法就可以，很简单吧！]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>android</tag>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android MarginLeft与MarginStart的区别]]></title>
    <url>%2FMyBlog%2F2018%2F01%2F01%2FAndroid%20MarginLeft%E4%B8%8EMarginStart%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[概述在写layout布局的时候，我们会发现有这样几个比较相似的属性： MarginStart VS MarginLeft MarginEnd VS MarginRight 这些属性的区别是什么? 根据api注释，我们得知MarginStart指的是控件距离开头View部分的间距大小，MarginLeft则指的是控件距离左边View部分的间距大小，MarginEnd和MarginRight同理。 一般情况下，View开始部分就是左边，但是有的语言目前为止还是按照从右往左的顺序来书写的，例如阿拉伯语，在Android 4.2系统之后，Google在Android中引入了RTL布局，更好了支持了由右到左文字布局的显示，为了更好的兼容RTL布局，google推荐使用MarginStart和MarginEnd来替代MarginLeft和MarginRight，这样应用可以在正常的屏幕和由右到左显示文字的屏幕上都保持一致的用户体验。 以下内容摘自他人翻译的中文Android 4.2API: Android 4.2引入了由右到左文字的全面本地支持布局。在本地RTL支持下，您可以为所有用户带来完美的应用体验，不论他们的文字书写方向是由左至右还是由右至左。 当用户切换系统语言到由右至左书写方式时，系统提供自动的应用UI布局和所有可视组件的镜像，包括文字元素的显示和输入。 您的应用仅需极少改变即可支持RTL布局镜像。如果您的应用支持这一特性，只要在您应用的manifest文件中将所有的”left/right”布局属性改变为对应的”start/end”即可。系统就会根据需要处理您UI了。]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>概念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[textview常用功能]]></title>
    <url>%2FMyBlog%2F2018%2F01%2F01%2Ftextview%E6%BB%91%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[textview介绍在andorid 开发中，textview有一些常用小技巧需要注意。 textview文字滑动这个功能实现起来很简单，只需要两步就可以完成。具体如下： 在xml布局声明textView的时候，我们设置它的scrollbars属性为vertical； 12345678&lt;TextView android:id=&quot;@+id/textView1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;200dp&quot; android:layout_weight=&quot;2.89&quot; android:scrollbars=&quot;vertical&quot; android:textColor=&quot;#ffffffff&quot; android:text=&quot; &quot;/&gt; 在java代码中使用textView时，调用textView的setMovementMethod方法即可。 1234567@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.location); tv = (TextView) findViewById(R.id.textView1); tv.setMovementMethod(ScrollingMovementMethod.getInstance());&#125; textview滑动到底部123456789101112131415161718192021String text = &quot;showText:\r\n&quot;; for (Student stu : sss) &#123; text += stu.toString() + &quot;\r\n&quot;; &#125; text += &quot;end.&quot;; showText.setText(text); int offset = (showText.getLineCount()) * showText.getLineHeight() + showText.getPaddingTop() + showText.getPaddingBottom(); Log.d(&quot;ObjectBoxActivity&quot;, &quot;offset:&quot; + offset + &quot;,getHeight&quot; + showText.getHeight()); if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123; Log.d(&quot;ObjectBoxActivity&quot;, &quot;showText.getLineCount():&quot; + showText.getLineCount() + &quot;,showText.getMaxLines()&quot; + showText.getMaxLines()); if (showText.getLineCount() &gt; showText.getMaxLines()) &#123; Log.d(&quot;ObjectBoxActivity&quot;, &quot; showText.scrollTo&quot;); showText.scrollTo(0, offset - showText.getHeight()); &#125; else &#123; showText.scrollTo(0, 0); &#125; &#125;]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>textview</tag>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蒸红薯]]></title>
    <url>%2FMyBlog%2F2017%2F10%2F29%2F%E8%92%B8%E7%BA%A2%E8%96%AF%2F</url>
    <content type="text"><![CDATA[简介这个红薯的做法超级简单，蒸出来的红薯好吃特别甜…吃的时候记得放杯水 红薯富含蛋白质、淀粉、果胶、纤维素、氨基酸、维生素及多种矿物质，有“长寿食品”之誉。含糖量达到15%-20%。有抗癌、保护心脏、预防肺气肿、糖尿病、减肥等功效。明代李时珍《本草纲目》记有“甘薯补虚，健脾开胃，强肾阴”，并说海中之人食之长寿。 食材 材料 取量 注意事项 红薯 适量 尽量挑选细长的，容易熟 水 适量 - 步骤 红薯洗净，去除坏的部分，需要留皮 上锅蒸，使用电磁炉大火20分钟 只要筷子戳一下，觉得没有阻力就ok了 注意 一定要大火、热水，让红薯表皮在短时间内蒸成半熟，这样蒸好的红薯味道甘甜。 最好选大小一致的红薯，以确保同时熟透。如果红薯个大，可以适当延长蒸的时间，或者分割成小块再蒸。 成品]]></content>
      <categories>
        <category>饮食</category>
      </categories>
      <tags>
        <tag>自制</tag>
        <tag>营养</tag>
        <tag>瘦身</tag>
        <tag>抗癌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[凉拌茄子]]></title>
    <url>%2FMyBlog%2F2017%2F10%2F18%2F%E5%87%89%E6%8B%8C%E8%8C%84%E5%AD%90%2F</url>
    <content type="text"><![CDATA[简介炎热的夏日，暑热难挡，许多人都会食欲不振。这时，一盘冰凉爽滑、酸辣开胃的“凉拌茄子”最合时宜了。 茄子不仅味道好、营养丰富，还可以降低胆固醇，是心血管病人的食疗佳品，特别是对动脉硬化、高血压、冠心病和坏血病患者非常有益，有辅助治疗作用。常吃茄子，可预防高血压引起的脑溢血和糖尿病引起的视网膜出血。 茄子中的皂甙降低胆固醇功效非常明显。 茄子虽然营养丰富，能防病保健，但它性寒滑，脾胃虚寒、容易腹泻的人不宜多吃。 凉拌茄子做法简单、健康少油，容易消化，是我家夏季餐桌上百吃不厌的一道菜。 食材 材料 取量 注意事项 长茄子 2个 - 大蒜 适量 - 盐 适量 - 醋 适量 - 香葱 适量 切丝 味精 适量 - 生抽 适量 - 香油 适量 - 干红辣椒 适量 - 步骤 将洗净的茄子切成厚片，上笼蒸制25分钟 将干红辣椒炸成辣椒油晾凉备用；香葱切成小段；红椒切末； 茄子蒸至用筷子轻戳感觉柔软即可 晾凉后用手撕成条状，摆于盘中 茄子上撒上香葱、红椒末；将大蒜加少许盐捣成泥，加入醋、生抽、味精及适量的辣椒油拌成调料汁，浇在茄子上即可。最好冷藏后拌匀食用，口感更佳。 成品]]></content>
      <categories>
        <category>饮食</category>
      </categories>
      <tags>
        <tag>自制</tag>
        <tag>营养</tag>
        <tag>瘦身</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[红薯玉米粥]]></title>
    <url>%2FMyBlog%2F2017%2F10%2F18%2F%E7%BA%A2%E8%96%AF%E7%8E%89%E7%B1%B3%E7%B2%A5%2F</url>
    <content type="text"><![CDATA[简介红薯玉米粥是生活中常吃到的，它不仅做法简单，同时还富含营养价值、味道还非常棒。 红薯和玉米都属于粗粮，所以它们含有丰富的膳食纤维，因此对于经常便秘的朋友可以适当食用，能有效的缓解便秘，同时还能够促进身体毒素的排出；除此之外，红薯玉米粥的热量也很低，所以对于想要减肥的朋友来说，可以在运动减肥的时候搭配此粥，不仅不会增加脂肪含量，同时还能营养身体。 食材主料 材料 取量 注意事项 红薯 1个 - 玉米粉 适量 - 步骤 红薯洗干净切滚刀块，不要去皮，去皮后容易碎的很厉害，如果你喜欢去皮的也是可以的，我这种红薯皮很薄，所以有皮也不会影响口感。 锅内加水，冷水锅将红薯块放入 将玉米粉用温水调和一下，煮的时候就不会化不开了。 红薯差不多的时候将调匀的玉米粉水倒入锅中，用勺子朝一个方向搅匀，煮开，至粥粘稠即可。 成品]]></content>
      <categories>
        <category>饮食</category>
      </categories>
      <tags>
        <tag>自制</tag>
        <tag>营养</tag>
        <tag>瘦身</tag>
      </tags>
  </entry>
</search>
